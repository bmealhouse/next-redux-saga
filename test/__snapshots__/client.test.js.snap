// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Wrapped component awaits asynchronous getInitialProps 1`] = `
<Connect(AsyncGetInitialProps)
  isServer={false}
  staticProp="Static message from getInitialProps()"
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "runSagaTask": [Function],
      "sagaTask": Object {
        "@@redux-saga/TASK": true,
        "cancel": [Function],
        "cont": [Function],
        "context": Object {},
        "end": [Function],
        "error": [Function],
        "id": 1,
        "isAborted": [Function],
        "isCancelled": [Function],
        "isRoot": true,
        "isRunning": [Function],
        "joiners": Array [],
        "meta": Object {
          "location": undefined,
          "name": "rootSaga",
        },
        "queue": Object {
          "abort": [Function],
          "addTask": [Function],
          "cancelAll": [Function],
          "getTasks": [Function],
        },
        "result": [Function],
        "setContext": [Function],
        "toPromise": [Function],
      },
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
/>
`;

exports[`Wrapped component awaits synchronous getInitialProps 1`] = `
<Connect(SyncGetInitialProps)
  isServer={false}
  staticProp="Static message from getInitialProps()"
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "runSagaTask": [Function],
      "sagaTask": Object {
        "@@redux-saga/TASK": true,
        "cancel": [Function],
        "cont": [Function],
        "context": Object {},
        "end": [Function],
        "error": [Function],
        "id": 1,
        "isAborted": [Function],
        "isCancelled": [Function],
        "isRoot": true,
        "isRunning": [Function],
        "joiners": Array [],
        "meta": Object {
          "location": undefined,
          "name": "rootSaga",
        },
        "queue": Object {
          "abort": [Function],
          "addTask": [Function],
          "cancelAll": [Function],
          "getTasks": [Function],
        },
        "result": [Function],
        "setContext": [Function],
        "toPromise": [Function],
      },
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
/>
`;

exports[`Wrapped component passes along React props 1`] = `
<Connect(FunctionalComponent)
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "runSagaTask": [Function],
      "sagaTask": Object {
        "@@redux-saga/TASK": true,
        "cancel": [Function],
        "cont": [Function],
        "context": Object {},
        "end": [Function],
        "error": [Function],
        "id": 1,
        "isAborted": [Function],
        "isCancelled": [Function],
        "isRoot": true,
        "isRunning": [Function],
        "joiners": Array [],
        "meta": Object {
          "location": undefined,
          "name": "rootSaga",
        },
        "queue": Object {
          "abort": [Function],
          "addTask": [Function],
          "cancelAll": [Function],
          "getTasks": [Function],
        },
        "result": [Function],
        "setContext": [Function],
        "toPromise": [Function],
      },
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
/>
`;

exports[`Wrapped component skips getInitialProps when it does not exist 1`] = `
<Connect(ClassComponent)
  isServer={false}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "runSagaTask": [Function],
      "sagaTask": Object {
        "@@redux-saga/TASK": true,
        "cancel": [Function],
        "cont": [Function],
        "context": Object {},
        "end": [Function],
        "error": [Function],
        "id": 1,
        "isAborted": [Function],
        "isCancelled": [Function],
        "isRoot": true,
        "isRunning": [Function],
        "joiners": Array [],
        "meta": Object {
          "location": undefined,
          "name": "rootSaga",
        },
        "queue": Object {
          "abort": [Function],
          "addTask": [Function],
          "cancelAll": [Function],
          "getTasks": [Function],
        },
        "result": [Function],
        "setContext": [Function],
        "toPromise": [Function],
      },
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
/>
`;
